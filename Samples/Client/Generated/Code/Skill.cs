// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatTables
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public partial struct SkillInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillInfo GetRootAsSkillInfo(ByteBuffer _bb) { return GetRootAsSkillInfo(_bb, new SkillInfo()); }
  public static SkillInfo GetRootAsSkillInfo(ByteBuffer _bb, SkillInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Id { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(6); }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public string Detail { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetailBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDetailBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDetailArray() { return __p.__vector_as_array<byte>(12); }
  public sbyte Type { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)1; } }
  public int MaxLevel { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)10; } }
  public float Range { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)20.5f; } }
  public double Power { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)1000.657; } }
  public float Duration { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1000.0f; } }

  public static Offset<FlatTables.SkillInfo> CreateSkillInfo(FlatBufferBuilder builder,
      int Index = 0,
      StringOffset IdOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset DetailOffset = default(StringOffset),
      sbyte Type = 1,
      int MaxLevel = 10,
      float Range = 20.5f,
      double Power = 1000.657,
      float Duration = 1000.0f) {
    builder.StartTable(10);
    SkillInfo.AddPower(builder, Power);
    SkillInfo.AddDuration(builder, Duration);
    SkillInfo.AddRange(builder, Range);
    SkillInfo.AddMaxLevel(builder, MaxLevel);
    SkillInfo.AddDetail(builder, DetailOffset);
    SkillInfo.AddIcon(builder, IconOffset);
    SkillInfo.AddName(builder, NameOffset);
    SkillInfo.AddId(builder, IdOffset);
    SkillInfo.AddIndex(builder, Index);
    SkillInfo.AddType(builder, Type);
    return SkillInfo.EndSkillInfo(builder);
  }

  public static void StartSkillInfo(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(1, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(3, iconOffset.Value, 0); }
  public static void AddDetail(FlatBufferBuilder builder, StringOffset detailOffset) { builder.AddOffset(4, detailOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, sbyte type) { builder.AddSbyte(5, type, 1); }
  public static void AddMaxLevel(FlatBufferBuilder builder, int maxLevel) { builder.AddInt(6, maxLevel, 10); }
  public static void AddRange(FlatBufferBuilder builder, float range) { builder.AddFloat(7, range, 20.5f); }
  public static void AddPower(FlatBufferBuilder builder, double power) { builder.AddDouble(8, power, 1000.657); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(9, duration, 1000.0f); }
  public static Offset<FlatTables.SkillInfo> EndSkillInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.SkillInfo>(o);
  }
}


static public class SkillInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Id*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 12 /*Detail*/, false)
      && verifier.VerifyField(tablePos, 14 /*Type*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*MaxLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Range*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Power*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Duration*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public partial struct SkillFb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillFb GetRootAsSkillFb(ByteBuffer _bb) { return GetRootAsSkillFb(_bb, new SkillFb()); }
  public static SkillFb GetRootAsSkillFb(ByteBuffer _bb, SkillFb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifySkillFb(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, SkillFbVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatTables.SkillInfo? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatTables.SkillInfo?)(new FlatTables.SkillInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.SkillFb> CreateSkillFb(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SkillFb.AddData(builder, dataOffset);
    return SkillFb.EndSkillFb(builder);
  }

  public static void StartSkillFb(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatTables.SkillInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatTables.SkillInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatTables.SkillInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatTables.SkillInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.SkillFb> EndSkillFb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.SkillFb>(o);
  }
  public static void FinishSkillFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.SkillFb> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSkillFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.SkillFb> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class SkillFbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, FlatTables.SkillInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
