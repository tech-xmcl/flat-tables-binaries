// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatTables
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public partial struct BuildingInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BuildingInfo GetRootAsBuildingInfo(ByteBuffer _bb) { return GetRootAsBuildingInfo(_bb, new BuildingInfo()); }
  public static BuildingInfo GetRootAsBuildingInfo(ByteBuffer _bb, BuildingInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuildingInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Level { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)5; } }
  public int Defense { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)100; } }

  public static Offset<FlatTables.BuildingInfo> CreateBuildingInfo(FlatBufferBuilder builder,
      int Index = 0,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int Level = 5,
      int Defense = 100) {
    builder.StartTable(5);
    BuildingInfo.AddDefense(builder, Defense);
    BuildingInfo.AddLevel(builder, Level);
    BuildingInfo.AddName(builder, NameOffset);
    BuildingInfo.AddId(builder, Id);
    BuildingInfo.AddIndex(builder, Index);
    return BuildingInfo.EndBuildingInfo(builder);
  }

  public static void StartBuildingInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(3, level, 5); }
  public static void AddDefense(FlatBufferBuilder builder, int defense) { builder.AddInt(4, defense, 100); }
  public static Offset<FlatTables.BuildingInfo> EndBuildingInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.BuildingInfo>(o);
  }
}


static public class BuildingInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyField(tablePos, 10 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Defense*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public partial struct BuildingFb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BuildingFb GetRootAsBuildingFb(ByteBuffer _bb) { return GetRootAsBuildingFb(_bb, new BuildingFb()); }
  public static BuildingFb GetRootAsBuildingFb(ByteBuffer _bb, BuildingFb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyBuildingFb(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, BuildingFbVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuildingFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatTables.BuildingInfo? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatTables.BuildingInfo?)(new FlatTables.BuildingInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.BuildingFb> CreateBuildingFb(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BuildingFb.AddData(builder, dataOffset);
    return BuildingFb.EndBuildingFb(builder);
  }

  public static void StartBuildingFb(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatTables.BuildingInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatTables.BuildingInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatTables.BuildingInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatTables.BuildingInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.BuildingFb> EndBuildingFb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.BuildingFb>(o);
  }
  public static void FinishBuildingFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.BuildingFb> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBuildingFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.BuildingFb> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class BuildingFbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, FlatTables.BuildingInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
