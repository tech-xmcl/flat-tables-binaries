// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatTables
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public partial struct HeroInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static HeroInfo GetRootAsHeroInfo(ByteBuffer _bb) { return GetRootAsHeroInfo(_bb, new HeroInfo()); }
  public static HeroInfo GetRootAsHeroInfo(ByteBuffer _bb, HeroInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HeroInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Detail { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetailBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDetailBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDetailArray() { return __p.__vector_as_array<byte>(10); }
  public short Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)11; } }
  public int Level { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public sbyte Quality { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)1; } }
  public string Icon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(18); }
  public double Power { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)1000.6542; } }
  public float MoveSpeed { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)10.2f; } }
  public string SkillList(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SkillListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.HeroInfo> CreateHeroInfo(FlatBufferBuilder builder,
      int Index = 0,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset DetailOffset = default(StringOffset),
      short Type = 11,
      int Level = 1,
      sbyte Quality = 1,
      StringOffset IconOffset = default(StringOffset),
      double Power = 1000.6542,
      float MoveSpeed = 10.2f,
      VectorOffset SkillListOffset = default(VectorOffset)) {
    builder.StartTable(11);
    HeroInfo.AddPower(builder, Power);
    HeroInfo.AddSkillList(builder, SkillListOffset);
    HeroInfo.AddMoveSpeed(builder, MoveSpeed);
    HeroInfo.AddIcon(builder, IconOffset);
    HeroInfo.AddLevel(builder, Level);
    HeroInfo.AddDetail(builder, DetailOffset);
    HeroInfo.AddName(builder, NameOffset);
    HeroInfo.AddId(builder, Id);
    HeroInfo.AddIndex(builder, Index);
    HeroInfo.AddType(builder, Type);
    HeroInfo.AddQuality(builder, Quality);
    return HeroInfo.EndHeroInfo(builder);
  }

  public static void StartHeroInfo(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddDetail(FlatBufferBuilder builder, StringOffset detailOffset) { builder.AddOffset(3, detailOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, short type) { builder.AddShort(4, type, 11); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(5, level, 1); }
  public static void AddQuality(FlatBufferBuilder builder, sbyte quality) { builder.AddSbyte(6, quality, 1); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(7, iconOffset.Value, 0); }
  public static void AddPower(FlatBufferBuilder builder, double power) { builder.AddDouble(8, power, 1000.6542); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, float moveSpeed) { builder.AddFloat(9, moveSpeed, 10.2f); }
  public static void AddSkillList(FlatBufferBuilder builder, VectorOffset skillListOffset) { builder.AddOffset(10, skillListOffset.Value, 0); }
  public static VectorOffset CreateSkillListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.HeroInfo> EndHeroInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.HeroInfo>(o);
  }
}


static public class HeroInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Detail*/, false)
      && verifier.VerifyField(tablePos, 12 /*Type*/, 2 /*short*/, 2, false)
      && verifier.VerifyField(tablePos, 14 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Quality*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyString(tablePos, 18 /*Icon*/, false)
      && verifier.VerifyField(tablePos, 20 /*Power*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*MoveSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*SkillList*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public partial struct HeroFb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static HeroFb GetRootAsHeroFb(ByteBuffer _bb) { return GetRootAsHeroFb(_bb, new HeroFb()); }
  public static HeroFb GetRootAsHeroFb(ByteBuffer _bb, HeroFb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyHeroFb(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, HeroFbVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HeroFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatTables.HeroInfo? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatTables.HeroInfo?)(new FlatTables.HeroInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.HeroFb> CreateHeroFb(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    HeroFb.AddData(builder, dataOffset);
    return HeroFb.EndHeroFb(builder);
  }

  public static void StartHeroFb(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatTables.HeroInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatTables.HeroInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatTables.HeroInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatTables.HeroInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.HeroFb> EndHeroFb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.HeroFb>(o);
  }
  public static void FinishHeroFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.HeroFb> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedHeroFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.HeroFb> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class HeroFbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, FlatTables.HeroInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
