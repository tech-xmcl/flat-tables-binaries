// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatTables
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public partial struct ItemInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ItemInfo GetRootAsItemInfo(ByteBuffer _bb) { return GetRootAsItemInfo(_bb, new ItemInfo()); }
  public static ItemInfo GetRootAsItemInfo(ByteBuffer _bb, ItemInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Id { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(6); }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public string Detail { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetailBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDetailBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDetailArray() { return __p.__vector_as_array<byte>(12); }
  public sbyte Quality { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)2; } }
  public int Type { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool CanUse { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public long MaxUse { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)500; } }
  public bool CanSell { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HideBag { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Source { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<FlatTables.ItemInfo> CreateItemInfo(FlatBufferBuilder builder,
      int Index = 0,
      StringOffset IdOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset DetailOffset = default(StringOffset),
      sbyte Quality = 2,
      int Type = 1,
      bool CanUse = true,
      long MaxUse = 500,
      bool CanSell = false,
      bool HideBag = false,
      StringOffset SourceOffset = default(StringOffset)) {
    builder.StartTable(12);
    ItemInfo.AddMaxUse(builder, MaxUse);
    ItemInfo.AddSource(builder, SourceOffset);
    ItemInfo.AddType(builder, Type);
    ItemInfo.AddDetail(builder, DetailOffset);
    ItemInfo.AddIcon(builder, IconOffset);
    ItemInfo.AddName(builder, NameOffset);
    ItemInfo.AddId(builder, IdOffset);
    ItemInfo.AddIndex(builder, Index);
    ItemInfo.AddHideBag(builder, HideBag);
    ItemInfo.AddCanSell(builder, CanSell);
    ItemInfo.AddCanUse(builder, CanUse);
    ItemInfo.AddQuality(builder, Quality);
    return ItemInfo.EndItemInfo(builder);
  }

  public static void StartItemInfo(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(1, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(3, iconOffset.Value, 0); }
  public static void AddDetail(FlatBufferBuilder builder, StringOffset detailOffset) { builder.AddOffset(4, detailOffset.Value, 0); }
  public static void AddQuality(FlatBufferBuilder builder, sbyte quality) { builder.AddSbyte(5, quality, 2); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(6, type, 1); }
  public static void AddCanUse(FlatBufferBuilder builder, bool canUse) { builder.AddBool(7, canUse, true); }
  public static void AddMaxUse(FlatBufferBuilder builder, long maxUse) { builder.AddLong(8, maxUse, 500); }
  public static void AddCanSell(FlatBufferBuilder builder, bool canSell) { builder.AddBool(9, canSell, false); }
  public static void AddHideBag(FlatBufferBuilder builder, bool hideBag) { builder.AddBool(10, hideBag, false); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(11, sourceOffset.Value, 0); }
  public static Offset<FlatTables.ItemInfo> EndItemInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.ItemInfo>(o);
  }
}


static public class ItemInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Id*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 12 /*Detail*/, false)
      && verifier.VerifyField(tablePos, 14 /*Quality*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*CanUse*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*MaxUse*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*CanSell*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*HideBag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 26 /*Source*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public partial struct ItemFb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ItemFb GetRootAsItemFb(ByteBuffer _bb) { return GetRootAsItemFb(_bb, new ItemFb()); }
  public static ItemFb GetRootAsItemFb(ByteBuffer _bb, ItemFb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyItemFb(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, ItemFbVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatTables.ItemInfo? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatTables.ItemInfo?)(new FlatTables.ItemInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.ItemFb> CreateItemFb(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemFb.AddData(builder, dataOffset);
    return ItemFb.EndItemFb(builder);
  }

  public static void StartItemFb(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatTables.ItemInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatTables.ItemInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatTables.ItemInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatTables.ItemInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.ItemFb> EndItemFb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.ItemFb>(o);
  }
  public static void FinishItemFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.ItemFb> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedItemFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.ItemFb> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class ItemFbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, FlatTables.ItemInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
