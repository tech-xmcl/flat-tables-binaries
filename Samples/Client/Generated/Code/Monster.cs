// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatTables
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public partial struct MonsterInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MonsterInfo GetRootAsMonsterInfo(ByteBuffer _bb) { return GetRootAsMonsterInfo(_bb, new MonsterInfo()); }
  public static MonsterInfo GetRootAsMonsterInfo(ByteBuffer _bb, MonsterInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public sbyte Level { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)1; } }
  public sbyte Quality { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)1; } }
  public string Icon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(16); }
  public string Model { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetModelBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetModelArray() { return __p.__vector_as_array<byte>(18); }
  public float MoveSpeed { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)10.4f; } }
  public float AttackSpeed { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)100.0f; } }
  public long Hp { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)10000; } }
  public string SkillId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSkillIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSkillIdArray() { return __p.__vector_as_array<byte>(26); }
  public long RewardCfg { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)30001001; } }

  public static Offset<FlatTables.MonsterInfo> CreateMonsterInfo(FlatBufferBuilder builder,
      int Index = 0,
      long Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int Type = 1,
      sbyte Level = 1,
      sbyte Quality = 1,
      StringOffset IconOffset = default(StringOffset),
      StringOffset ModelOffset = default(StringOffset),
      float MoveSpeed = 10.4f,
      float AttackSpeed = 100.0f,
      long Hp = 10000,
      StringOffset SkillIdOffset = default(StringOffset),
      long RewardCfg = 30001001) {
    builder.StartTable(13);
    MonsterInfo.AddRewardCfg(builder, RewardCfg);
    MonsterInfo.AddHp(builder, Hp);
    MonsterInfo.AddId(builder, Id);
    MonsterInfo.AddSkillId(builder, SkillIdOffset);
    MonsterInfo.AddAttackSpeed(builder, AttackSpeed);
    MonsterInfo.AddMoveSpeed(builder, MoveSpeed);
    MonsterInfo.AddModel(builder, ModelOffset);
    MonsterInfo.AddIcon(builder, IconOffset);
    MonsterInfo.AddType(builder, Type);
    MonsterInfo.AddName(builder, NameOffset);
    MonsterInfo.AddIndex(builder, Index);
    MonsterInfo.AddQuality(builder, Quality);
    MonsterInfo.AddLevel(builder, Level);
    return MonsterInfo.EndMonsterInfo(builder);
  }

  public static void StartMonsterInfo(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(3, type, 1); }
  public static void AddLevel(FlatBufferBuilder builder, sbyte level) { builder.AddSbyte(4, level, 1); }
  public static void AddQuality(FlatBufferBuilder builder, sbyte quality) { builder.AddSbyte(5, quality, 1); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(6, iconOffset.Value, 0); }
  public static void AddModel(FlatBufferBuilder builder, StringOffset modelOffset) { builder.AddOffset(7, modelOffset.Value, 0); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, float moveSpeed) { builder.AddFloat(8, moveSpeed, 10.4f); }
  public static void AddAttackSpeed(FlatBufferBuilder builder, float attackSpeed) { builder.AddFloat(9, attackSpeed, 100.0f); }
  public static void AddHp(FlatBufferBuilder builder, long hp) { builder.AddLong(10, hp, 10000); }
  public static void AddSkillId(FlatBufferBuilder builder, StringOffset skillIdOffset) { builder.AddOffset(11, skillIdOffset.Value, 0); }
  public static void AddRewardCfg(FlatBufferBuilder builder, long rewardCfg) { builder.AddLong(12, rewardCfg, 30001001); }
  public static Offset<FlatTables.MonsterInfo> EndMonsterInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.MonsterInfo>(o);
  }
}


static public class MonsterInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Level*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*Quality*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 18 /*Model*/, false)
      && verifier.VerifyField(tablePos, 20 /*MoveSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*AttackSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Hp*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 26 /*SkillId*/, false)
      && verifier.VerifyField(tablePos, 28 /*RewardCfg*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public partial struct MonsterFb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MonsterFb GetRootAsMonsterFb(ByteBuffer _bb) { return GetRootAsMonsterFb(_bb, new MonsterFb()); }
  public static MonsterFb GetRootAsMonsterFb(ByteBuffer _bb, MonsterFb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyMonsterFb(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, MonsterFbVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatTables.MonsterInfo? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatTables.MonsterInfo?)(new FlatTables.MonsterInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.MonsterFb> CreateMonsterFb(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MonsterFb.AddData(builder, dataOffset);
    return MonsterFb.EndMonsterFb(builder);
  }

  public static void StartMonsterFb(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatTables.MonsterInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatTables.MonsterInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatTables.MonsterInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatTables.MonsterInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.MonsterFb> EndMonsterFb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.MonsterFb>(o);
  }
  public static void FinishMonsterFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.MonsterFb> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMonsterFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.MonsterFb> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class MonsterFbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, FlatTables.MonsterInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
