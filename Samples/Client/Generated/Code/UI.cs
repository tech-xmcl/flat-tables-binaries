// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatTables
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public partial struct UIInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UIInfo GetRootAsUIInfo(ByteBuffer _bb) { return GetRootAsUIInfo(_bb, new UIInfo()); }
  public static UIInfo GetRootAsUIInfo(ByteBuffer _bb, UIInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UIInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Id { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(6); }
  public string Layer { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLayerBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetLayerBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLayerArray() { return __p.__vector_as_array<byte>(8); }
  public short Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)10; } }
  public string OpenAnim { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpenAnimBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOpenAnimBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOpenAnimArray() { return __p.__vector_as_array<byte>(12); }
  public string PrefabName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(14); }
  public bool ShowHelpBtn { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool IsGlobal { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }

  public static Offset<FlatTables.UIInfo> CreateUIInfo(FlatBufferBuilder builder,
      int Index = 0,
      StringOffset IdOffset = default(StringOffset),
      StringOffset LayerOffset = default(StringOffset),
      short Type = 10,
      StringOffset OpenAnimOffset = default(StringOffset),
      StringOffset PrefabNameOffset = default(StringOffset),
      bool ShowHelpBtn = true,
      bool IsGlobal = true) {
    builder.StartTable(8);
    UIInfo.AddPrefabName(builder, PrefabNameOffset);
    UIInfo.AddOpenAnim(builder, OpenAnimOffset);
    UIInfo.AddLayer(builder, LayerOffset);
    UIInfo.AddId(builder, IdOffset);
    UIInfo.AddIndex(builder, Index);
    UIInfo.AddType(builder, Type);
    UIInfo.AddIsGlobal(builder, IsGlobal);
    UIInfo.AddShowHelpBtn(builder, ShowHelpBtn);
    return UIInfo.EndUIInfo(builder);
  }

  public static void StartUIInfo(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(1, idOffset.Value, 0); }
  public static void AddLayer(FlatBufferBuilder builder, StringOffset layerOffset) { builder.AddOffset(2, layerOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, short type) { builder.AddShort(3, type, 10); }
  public static void AddOpenAnim(FlatBufferBuilder builder, StringOffset openAnimOffset) { builder.AddOffset(4, openAnimOffset.Value, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset prefabNameOffset) { builder.AddOffset(5, prefabNameOffset.Value, 0); }
  public static void AddShowHelpBtn(FlatBufferBuilder builder, bool showHelpBtn) { builder.AddBool(6, showHelpBtn, true); }
  public static void AddIsGlobal(FlatBufferBuilder builder, bool isGlobal) { builder.AddBool(7, isGlobal, true); }
  public static Offset<FlatTables.UIInfo> EndUIInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.UIInfo>(o);
  }
}


static public class UIInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Id*/, false)
      && verifier.VerifyString(tablePos, 8 /*Layer*/, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 2 /*short*/, 2, false)
      && verifier.VerifyString(tablePos, 12 /*OpenAnim*/, false)
      && verifier.VerifyString(tablePos, 14 /*PrefabName*/, false)
      && verifier.VerifyField(tablePos, 16 /*ShowHelpBtn*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*IsGlobal*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public partial struct UIFb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UIFb GetRootAsUIFb(ByteBuffer _bb) { return GetRootAsUIFb(_bb, new UIFb()); }
  public static UIFb GetRootAsUIFb(ByteBuffer _bb, UIFb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyUIFb(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, UIFbVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UIFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatTables.UIInfo? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatTables.UIInfo?)(new FlatTables.UIInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.UIFb> CreateUIFb(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    UIFb.AddData(builder, dataOffset);
    return UIFb.EndUIFb(builder);
  }

  public static void StartUIFb(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatTables.UIInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatTables.UIInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatTables.UIInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatTables.UIInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.UIFb> EndUIFb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.UIFb>(o);
  }
  public static void FinishUIFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.UIFb> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedUIFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.UIFb> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class UIFbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, FlatTables.UIInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
