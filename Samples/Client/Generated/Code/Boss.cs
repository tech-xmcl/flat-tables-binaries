// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatTables
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public partial struct BossInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BossInfo GetRootAsBossInfo(ByteBuffer _bb) { return GetRootAsBossInfo(_bb, new BossInfo()); }
  public static BossInfo GetRootAsBossInfo(ByteBuffer _bb, BossInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BossInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Level { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)5; } }
  public int Hp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)100; } }

  public static Offset<FlatTables.BossInfo> CreateBossInfo(FlatBufferBuilder builder,
      int Index = 0,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int Level = 5,
      int Hp = 100) {
    builder.StartTable(5);
    BossInfo.AddHp(builder, Hp);
    BossInfo.AddLevel(builder, Level);
    BossInfo.AddName(builder, NameOffset);
    BossInfo.AddId(builder, Id);
    BossInfo.AddIndex(builder, Index);
    return BossInfo.EndBossInfo(builder);
  }

  public static void StartBossInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(3, level, 5); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(4, hp, 100); }
  public static Offset<FlatTables.BossInfo> EndBossInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.BossInfo>(o);
  }
}


static public class BossInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyField(tablePos, 10 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Hp*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public partial struct BossFb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BossFb GetRootAsBossFb(ByteBuffer _bb) { return GetRootAsBossFb(_bb, new BossFb()); }
  public static BossFb GetRootAsBossFb(ByteBuffer _bb, BossFb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyBossFb(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, BossFbVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BossFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatTables.BossInfo? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatTables.BossInfo?)(new FlatTables.BossInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.BossFb> CreateBossFb(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BossFb.AddData(builder, dataOffset);
    return BossFb.EndBossFb(builder);
  }

  public static void StartBossFb(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatTables.BossInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatTables.BossInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatTables.BossInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatTables.BossInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.BossFb> EndBossFb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.BossFb>(o);
  }
  public static void FinishBossFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.BossFb> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBossFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.BossFb> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class BossFbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, FlatTables.BossInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
