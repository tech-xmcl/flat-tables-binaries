// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatTables
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public partial struct GuideInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GuideInfo GetRootAsGuideInfo(ByteBuffer _bb) { return GetRootAsGuideInfo(_bb, new GuideInfo()); }
  public static GuideInfo GetRootAsGuideInfo(ByteBuffer _bb, GuideInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Id { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(6); }
  public int GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public short Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public long ConditionList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionListBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetConditionListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetConditionListArray() { return __p.__vector_as_array<long>(12); }
  public string NextId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNextIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNextIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNextIdArray() { return __p.__vector_as_array<byte>(14); }
  public int EventId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)50001; } }
  public bool IsForce { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public long FinishReward { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)30001001; } }

  public static Offset<FlatTables.GuideInfo> CreateGuideInfo(FlatBufferBuilder builder,
      int Index = 0,
      StringOffset IdOffset = default(StringOffset),
      int GroupId = 1,
      short Type = 0,
      VectorOffset ConditionListOffset = default(VectorOffset),
      StringOffset NextIdOffset = default(StringOffset),
      int EventId = 50001,
      bool IsForce = true,
      long FinishReward = 30001001) {
    builder.StartTable(9);
    GuideInfo.AddFinishReward(builder, FinishReward);
    GuideInfo.AddEventId(builder, EventId);
    GuideInfo.AddNextId(builder, NextIdOffset);
    GuideInfo.AddConditionList(builder, ConditionListOffset);
    GuideInfo.AddGroupId(builder, GroupId);
    GuideInfo.AddId(builder, IdOffset);
    GuideInfo.AddIndex(builder, Index);
    GuideInfo.AddType(builder, Type);
    GuideInfo.AddIsForce(builder, IsForce);
    return GuideInfo.EndGuideInfo(builder);
  }

  public static void StartGuideInfo(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(1, idOffset.Value, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(2, groupId, 1); }
  public static void AddType(FlatBufferBuilder builder, short type) { builder.AddShort(3, type, 0); }
  public static void AddConditionList(FlatBufferBuilder builder, VectorOffset conditionListOffset) { builder.AddOffset(4, conditionListOffset.Value, 0); }
  public static VectorOffset CreateConditionListVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionListVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionListVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddNextId(FlatBufferBuilder builder, StringOffset nextIdOffset) { builder.AddOffset(5, nextIdOffset.Value, 0); }
  public static void AddEventId(FlatBufferBuilder builder, int eventId) { builder.AddInt(6, eventId, 50001); }
  public static void AddIsForce(FlatBufferBuilder builder, bool isForce) { builder.AddBool(7, isForce, true); }
  public static void AddFinishReward(FlatBufferBuilder builder, long finishReward) { builder.AddLong(8, finishReward, 30001001); }
  public static Offset<FlatTables.GuideInfo> EndGuideInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.GuideInfo>(o);
  }
}


static public class GuideInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Id*/, false)
      && verifier.VerifyField(tablePos, 8 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 2 /*short*/, 2, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*ConditionList*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 14 /*NextId*/, false)
      && verifier.VerifyField(tablePos, 16 /*EventId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*IsForce*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*FinishReward*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public partial struct GuideFb : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GuideFb GetRootAsGuideFb(ByteBuffer _bb) { return GetRootAsGuideFb(_bb, new GuideFb()); }
  public static GuideFb GetRootAsGuideFb(ByteBuffer _bb, GuideFb obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyGuideFb(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, GuideFbVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GuideFb __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatTables.GuideInfo? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatTables.GuideInfo?)(new FlatTables.GuideInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatTables.GuideFb> CreateGuideFb(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    GuideFb.AddData(builder, dataOffset);
    return GuideFb.EndGuideFb(builder);
  }

  public static void StartGuideFb(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatTables.GuideInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatTables.GuideInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatTables.GuideInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatTables.GuideInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatTables.GuideFb> EndGuideFb(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatTables.GuideFb>(o);
  }
  public static void FinishGuideFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.GuideFb> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGuideFbBuffer(FlatBufferBuilder builder, Offset<FlatTables.GuideFb> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class GuideFbVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, FlatTables.GuideInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
