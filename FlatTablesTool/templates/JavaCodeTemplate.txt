
BEGIN_DECLARE_FILE(IConfFileLoader.java)
// <auto-generated>
// automatically generated by the FlatTables Tool, do not modify
// </auto-generated>

package {{NAMESPACE}};

public interface IConfFileLoader {
    byte[] loadAllBytes(String fileName);
}
END_DECLARE_FILE


BEGIN_DECLARE_FILE(IConfDisposable.java)
// <auto-generated>
// automatically generated by the FlatTables Tool, do not modify
// </auto-generated>

package {{NAMESPACE}};

public interface IConfDisposable {
    void dispose(boolean unRegister);
}
END_DECLARE_FILE


BEGIN_DECLARE_FILE(ConfManager.java)
// <auto-generated>
// automatically generated by the FlatTables Tool, do not modify
// </auto-generated>

package {{NAMESPACE}};

import java.util.HashSet;

public final class ConfManager {
    private static HashSet<IConfDisposable> _allDisposable = new HashSet<>(200);
    private static IConfFileLoader _confFileLoader = null;
    private static boolean _isBinCompressed = false;
    private static boolean _useBrotliAlgorithm = true;

    public static void setConfFileLoader(IConfFileLoader confFileLoader, boolean isBinCompressed, boolean useBrotliAlgorithm) {
        _confFileLoader = confFileLoader;
        _isBinCompressed = isBinCompressed;
        _useBrotliAlgorithm = useBrotliAlgorithm;
    }

    public static byte[] loadConfFile(String fileName) {
        byte[] bytes = _confFileLoader != null ? _confFileLoader.loadAllBytes(fileName) : null;
        if (_isBinCompressed && bytes != null && bytes.length > 0) {
            // TODO Decompress byte array using Brotli or GZip
            if (_useBrotliAlgorithm){
            } else {
            }
        }
        return bytes;
    }

    public static void register(IConfDisposable disposable) {
        _allDisposable.add(disposable);
    }

    public static void unRegister(IConfDisposable disposable) {
        _allDisposable.remove(disposable);
    }

    public static void disposeAll() {
        for (IConfDisposable disposable : _allDisposable) {
            disposable.dispose(false);
        }
        _allDisposable.clear();
        _confFileLoader = null;
    }
}
END_DECLARE_FILE


BEGIN_DECLARE_FILE(ConfBase.java)
// <auto-generated>
//  automatically generated by the FlatTables Tool, do not modify
// </auto-generated>

package {{NAMESPACE}};

import com.google.flatbuffers.Table;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Predicate;

public abstract class ConfBase<T_Info extends Table, T_KEY> implements IConfDisposable {
    private Map<T_KEY, Integer> _toi = null;
    private List<T_Info> _list = null;
    protected int _count = 0;

    protected ConfBase() {
        ConfManager.register(this);
        onCreate();
        onPostCreated();
    }

    public List<T_Info> getListCache() {
        if (_list != null) return _list;

        _list = new ArrayList<>(_count);
        for (int i = 0; i < _count; i++) {
            T_Info info = getByIndex(i);
            if (info != null) _list.add(info);
        }

        return _list;
    }

    public int getCount() {
        return _count;
    }

    @Override
    public void dispose(boolean unRegister) {
        if (_toi != null) {
            _toi.clear();
            _toi = null;
        }
        clearListCache();
        if (unRegister) {
            ConfManager.unRegister(this);
        }
    }

    public void clearListCache() {
        if (_list != null) {
            _list.clear();
            _list = null;
        }
    }

    public void forEach(Consumer<T_Info> action) {
        getListCache().forEach(action);
    }

    public T_Info find(Predicate<T_Info> match) {
        return getListCache().stream().filter(match).findFirst().orElse(null);
    }

    public List<T_Info> findAll(Predicate<T_Info> match) {
        List<T_Info> result = new ArrayList<>();
        getListCache().forEach(info -> {
            if (match.test(info)) {
                result.add(info);
            }
        });
        return result;
    }

    public int findAll(List<T_Info> _list, Predicate<T_Info> match) {
        getListCache().forEach(info -> {
            if (match.test(info)) {
                _list.add(info);
            }
        });
        return _list.size();
    }

    protected ByteBuffer getBuffer(String fileName) {
        byte[] bytes = ConfManager.loadConfFile(fileName);
        if (bytes != null && bytes.length > 0) {
            return ByteBuffer.wrap(bytes);
        }
        return null;
    }

    protected void cacheIdToIndex(T_KEY id, int index) {
        if (_toi == null) {
            _toi = new HashMap<T_KEY, Integer>(_count);
        }
        _toi.put(id, index);
    }

    protected abstract void onCreate();

    // Can override methods to do additional data processing
    protected void onPostCreated() {
    }

    public T_Info get(T_KEY id) {
        if (_toi == null) return null;
        Integer idx = _toi.get(id);
        return idx == null ? null : getByIndex(idx);
    }

    public abstract T_Info getByIndex(int index);
}
END_DECLARE_FILE

BEGIN_DECLARE_FILE(Conf{{TABLE_NAME}}.java)
// <auto-generated>
//  automatically generated by the FlatTables Tool, do not modify
// </auto-generated>

package {{NAMESPACE}};

import java.nio.ByteBuffer;

public final class Conf{{TABLE_NAME}} extends ConfBase<{{TABLE_NAME}}Info, {{TABLE_FIELD_ID_VAR_TYPE}}>
{
    private {{TABLE_NAME}}Fb _source;

    private static final Object _lockObject = new Object();
    private static Conf{{TABLE_NAME}} _instance = null;

    public static Conf{{TABLE_NAME}} getInstance() {
        if (_instance == null) {
            synchronized (_lockObject) {
                if (_instance == null) {
                    _instance = new Conf{{TABLE_NAME}}();
                }
            }
        }
        return _instance;
    }

    public static void preload() {
        getInstance();
    }
        
    @Override
    protected void onCreate() 
    {
        ByteBuffer buffer = getBuffer("{{TABLE_BIN_NAME}}.{{TABLE_BIN_EXTENSION}}");
        _source = {{TABLE_NAME}}Fb.getRootAs{{TABLE_NAME}}Fb(buffer);
        _count = _source.dataLength();

        for (int i = 0; i < getCount(); i++) {
            {{TABLE_NAME}}Info data = getByIndex(i);
            if (data != null) {
                cacheIdToIndex(data.id(), data.index());
            }
        }
    }

    @Override
    public void dispose(boolean unRegister) {
        super.dispose(unRegister);
        _instance = null;
    }

    @Override
    public {{TABLE_NAME}}Info getByIndex(int index) {
        return _source.data(index);
    }
}
END_DECLARE_FILE